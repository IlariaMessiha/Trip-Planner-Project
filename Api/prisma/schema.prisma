generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model attraction_review {
  id            Int         @id @default(autoincrement())
  title         String?     @db.VarChar(255)
  body          String?
  rating        Int?
  user_id       Int?
  attraction_id Int?
  Attraction    attraction? @relation(fields: [attraction_id], references: [id], onUpdate: NoAction, map: "attraction_review_attraction_id_foreign")
  user          user?       @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "attraction_review_user_id_foreign")
}

model attraction_tag {
  id            Int         @id @default(autoincrement())
  attraction_id Int?
  tag_id        Int?
  Attraction    attraction? @relation(fields: [attraction_id], references: [id], onUpdate: NoAction, map: "attraction_tag_attraction_id_foreign")
  tag           tag?        @relation(fields: [tag_id], references: [id], onUpdate: NoAction, map: "attraction_tag_tag_id_foreign")
}

model city {
  id             Int             @id @default(autoincrement())
  label          String?         @db.VarChar(255)
  country_id     Int?
  city_code      String?         @db.VarChar(255)
  long           Decimal?        @db.Decimal(10, 5)
  lat            Decimal?        @db.Decimal(10, 5)
  city_image     String?         @db.Uuid
  attraction     attraction[]
  directus_files directus_files? @relation(fields: [city_image], references: [id], onUpdate: NoAction, map: "city_city_image_foreign")
  country        country?        @relation(fields: [country_id], references: [id], onUpdate: NoAction, map: "city_country_id_foreign")
  hotel          hotel[]
  restaurant     restaurant[]
}

model country {
  id           Int     @id @default(autoincrement())
  country_code String? @db.VarChar(255)
  label        String? @db.VarChar(255)
  city         city[]
}

model directus_activity {
  id                 Int                  @id @default(autoincrement())
  action             String               @db.VarChar(45)
  user               String?              @db.Uuid
  timestamp          DateTime             @default(now()) @db.Timestamptz(6)
  ip                 String?              @db.VarChar(50)
  user_agent         String?              @db.VarChar(255)
  collection         String               @db.VarChar(64)
  item               String               @db.VarChar(255)
  comment            String?
  origin             String?              @db.VarChar(255)
  directus_revisions directus_revisions[]
}

model directus_collections {
  collection                 String                 @id @db.VarChar(64)
  icon                       String?                @db.VarChar(30)
  note                       String?
  display_template           String?                @db.VarChar(255)
  hidden                     Boolean                @default(false)
  singleton                  Boolean                @default(false)
  translations               Json?                  @db.Json
  archive_field              String?                @db.VarChar(64)
  archive_app_filter         Boolean                @default(true)
  archive_value              String?                @db.VarChar(255)
  unarchive_value            String?                @db.VarChar(255)
  sort_field                 String?                @db.VarChar(64)
  accountability             String?                @default("all") @db.VarChar(255)
  color                      String?                @db.VarChar(255)
  item_duplication_fields    Json?                  @db.Json
  sort                       Int?
  group                      String?                @db.VarChar(64)
  collapse                   String                 @default("open") @db.VarChar(255)
  directus_collections       directus_collections?  @relation("directus_collectionsTodirectus_collections", fields: [group], references: [collection], onDelete: NoAction, onUpdate: NoAction, map: "directus_collections_group_foreign")
  other_directus_collections directus_collections[] @relation("directus_collectionsTodirectus_collections")
  directus_shares            directus_shares[]
}

model directus_dashboards {
  id              String            @id @db.Uuid
  name            String            @db.VarChar(255)
  icon            String            @default("dashboard") @db.VarChar(30)
  note            String?
  date_created    DateTime?         @default(now()) @db.Timestamptz(6)
  user_created    String?           @db.Uuid
  color           String?           @db.VarChar(255)
  directus_users  directus_users?   @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_dashboards_user_created_foreign")
  directus_panels directus_panels[]
}

model directus_fields {
  id                 Int      @id @default(autoincrement())
  collection         String   @db.VarChar(64)
  field              String   @db.VarChar(64)
  special            String?  @db.VarChar(64)
  interface          String?  @db.VarChar(64)
  options            Json?    @db.Json
  display            String?  @db.VarChar(64)
  display_options    Json?    @db.Json
  readonly           Boolean  @default(false)
  hidden             Boolean  @default(false)
  sort               Int?
  width              String?  @default("full") @db.VarChar(30)
  translations       Json?    @db.Json
  note               String?
  conditions         Json?    @db.Json
  required           Boolean? @default(false)
  group              String?  @db.VarChar(64)
  validation         Json?    @db.Json
  validation_message String?
}

model directus_files {
  id                                                                    String              @id @db.Uuid
  storage                                                               String              @db.VarChar(255)
  filename_disk                                                         String?             @db.VarChar(255)
  filename_download                                                     String              @db.VarChar(255)
  title                                                                 String?             @db.VarChar(255)
  type                                                                  String?             @db.VarChar(255)
  folder                                                                String?             @db.Uuid
  uploaded_by                                                           String?             @db.Uuid
  uploaded_on                                                           DateTime            @default(now()) @db.Timestamptz(6)
  modified_by                                                           String?             @db.Uuid
  modified_on                                                           DateTime            @default(now()) @db.Timestamptz(6)
  charset                                                               String?             @db.VarChar(50)
  filesize                                                              BigInt?
  width                                                                 Int?
  height                                                                Int?
  duration                                                              Int?
  embed                                                                 String?             @db.VarChar(200)
  description                                                           String?
  location                                                              String?
  tags                                                                  String?
  metadata                                                              Json?               @db.Json
  attraction                                                            attraction[]
  city                                                                  city[]
  directus_folders                                                      directus_folders?   @relation(fields: [folder], references: [id], onUpdate: NoAction, map: "directus_files_folder_foreign")
  directus_users_directus_files_modified_byTodirectus_users             directus_users?     @relation("directus_files_modified_byTodirectus_users", fields: [modified_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_files_modified_by_foreign")
  directus_users_directus_files_uploaded_byTodirectus_users             directus_users?     @relation("directus_files_uploaded_byTodirectus_users", fields: [uploaded_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_files_uploaded_by_foreign")
  directus_settings_directus_settings_project_logoTodirectus_files      directus_settings[] @relation("directus_settings_project_logoTodirectus_files")
  directus_settings_directus_settings_public_backgroundTodirectus_files directus_settings[] @relation("directus_settings_public_backgroundTodirectus_files")
  directus_settings_directus_settings_public_foregroundTodirectus_files directus_settings[] @relation("directus_settings_public_foregroundTodirectus_files")
  hotel                                                                 hotel[]
  restaurant                                                            restaurant[]
}

model directus_flows {
  id                  String                @id @db.Uuid
  name                String                @db.VarChar(255)
  icon                String?               @db.VarChar(30)
  color               String?               @db.VarChar(255)
  description         String?
  status              String                @default("active") @db.VarChar(255)
  trigger             String?               @db.VarChar(255)
  accountability      String?               @default("all") @db.VarChar(255)
  options             Json?                 @db.Json
  operation           String?               @db.Uuid
  date_created        DateTime?             @default(now()) @db.Timestamptz(6)
  user_created        String?               @db.Uuid
  directus_users      directus_users?       @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_flows_user_created_foreign")
  directus_operations directus_operations[]
}

model directus_folders {
  id                     String              @id @db.Uuid
  name                   String              @db.VarChar(255)
  parent                 String?             @db.Uuid
  directus_files         directus_files[]
  directus_folders       directus_folders?   @relation("directus_foldersTodirectus_folders", fields: [parent], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_folders_parent_foreign")
  other_directus_folders directus_folders[]  @relation("directus_foldersTodirectus_folders")
  directus_settings      directus_settings[]
}

model directus_migrations {
  version   String    @id @db.VarChar(255)
  name      String    @db.VarChar(255)
  timestamp DateTime? @default(now()) @db.Timestamptz(6)
}

model directus_notifications {
  id                                                              Int             @id @default(autoincrement())
  timestamp                                                       DateTime?       @default(now()) @db.Timestamptz(6)
  status                                                          String?         @default("inbox") @db.VarChar(255)
  recipient                                                       String          @db.Uuid
  sender                                                          String?         @db.Uuid
  subject                                                         String          @db.VarChar(255)
  message                                                         String?
  collection                                                      String?         @db.VarChar(64)
  item                                                            String?         @db.VarChar(255)
  directus_users_directus_notifications_recipientTodirectus_users directus_users  @relation("directus_notifications_recipientTodirectus_users", fields: [recipient], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_notifications_recipient_foreign")
  directus_users_directus_notifications_senderTodirectus_users    directus_users? @relation("directus_notifications_senderTodirectus_users", fields: [sender], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_notifications_sender_foreign")
}

model directus_operations {
  id                                                                         String                @id @db.Uuid
  name                                                                       String?               @db.VarChar(255)
  key                                                                        String                @db.VarChar(255)
  type                                                                       String                @db.VarChar(255)
  position_x                                                                 Int
  position_y                                                                 Int
  options                                                                    Json?                 @db.Json
  resolve                                                                    String?               @db.Uuid
  reject                                                                     String?               @db.Uuid
  flow                                                                       String                @db.Uuid
  date_created                                                               DateTime?             @default(now()) @db.Timestamptz(6)
  user_created                                                               String?               @db.Uuid
  directus_flows                                                             directus_flows        @relation(fields: [flow], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_operations_flow_foreign")
  directus_operations_directus_operations_rejectTodirectus_operations        directus_operations?  @relation("directus_operations_rejectTodirectus_operations", fields: [reject], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_operations_reject_foreign")
  other_directus_operations_directus_operations_rejectTodirectus_operations  directus_operations[] @relation("directus_operations_rejectTodirectus_operations")
  directus_operations_directus_operations_resolveTodirectus_operations       directus_operations?  @relation("directus_operations_resolveTodirectus_operations", fields: [resolve], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_operations_resolve_foreign")
  other_directus_operations_directus_operations_resolveTodirectus_operations directus_operations[] @relation("directus_operations_resolveTodirectus_operations")
  directus_users                                                             directus_users?       @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_operations_user_created_foreign")
}

model directus_panels {
  id                  String              @id @db.Uuid
  dashboard           String              @db.Uuid
  name                String?             @db.VarChar(255)
  icon                String?             @db.VarChar(30)
  color               String?             @db.VarChar(10)
  show_header         Boolean             @default(false)
  note                String?
  type                String              @db.VarChar(255)
  position_x          Int
  position_y          Int
  width               Int
  height              Int
  options             Json?               @db.Json
  date_created        DateTime?           @default(now()) @db.Timestamptz(6)
  user_created        String?             @db.Uuid
  directus_dashboards directus_dashboards @relation(fields: [dashboard], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_panels_dashboard_foreign")
  directus_users      directus_users?     @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_panels_user_created_foreign")
}

model directus_permissions {
  id             Int             @id @default(autoincrement())
  role           String?         @db.Uuid
  collection     String          @db.VarChar(64)
  action         String          @db.VarChar(10)
  permissions    Json?           @db.Json
  validation     Json?           @db.Json
  presets        Json?           @db.Json
  fields         String?
  directus_roles directus_roles? @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_permissions_role_foreign")
}

model directus_presets {
  id               Int             @id @default(autoincrement())
  bookmark         String?         @db.VarChar(255)
  user             String?         @db.Uuid
  role             String?         @db.Uuid
  collection       String?         @db.VarChar(64)
  search           String?         @db.VarChar(100)
  layout           String?         @default("tabular") @db.VarChar(100)
  layout_query     Json?           @db.Json
  layout_options   Json?           @db.Json
  refresh_interval Int?
  filter           Json?           @db.Json
  icon             String          @default("bookmark_outline") @db.VarChar(30)
  color            String?         @db.VarChar(255)
  directus_roles   directus_roles? @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_presets_role_foreign")
  directus_users   directus_users? @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_presets_user_foreign")
}

model directus_relations {
  id                      Int     @id @default(autoincrement())
  many_collection         String  @db.VarChar(64)
  many_field              String  @db.VarChar(64)
  one_collection          String? @db.VarChar(64)
  one_field               String? @db.VarChar(64)
  one_collection_field    String? @db.VarChar(64)
  one_allowed_collections String?
  junction_field          String? @db.VarChar(64)
  sort_field              String? @db.VarChar(64)
  one_deselect_action     String  @default("nullify") @db.VarChar(255)
}

model directus_revisions {
  id                       Int                  @id @default(autoincrement())
  activity                 Int
  collection               String               @db.VarChar(64)
  item                     String               @db.VarChar(255)
  data                     Json?                @db.Json
  delta                    Json?                @db.Json
  parent                   Int?
  directus_activity        directus_activity    @relation(fields: [activity], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_revisions_activity_foreign")
  directus_revisions       directus_revisions?  @relation("directus_revisionsTodirectus_revisions", fields: [parent], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_revisions_parent_foreign")
  other_directus_revisions directus_revisions[] @relation("directus_revisionsTodirectus_revisions")
}

model directus_roles {
  id                   String                 @id @db.Uuid
  name                 String                 @db.VarChar(100)
  icon                 String                 @default("supervised_user_circle") @db.VarChar(30)
  description          String?
  ip_access            String?
  enforce_tfa          Boolean                @default(false)
  admin_access         Boolean                @default(false)
  app_access           Boolean                @default(true)
  directus_permissions directus_permissions[]
  directus_presets     directus_presets[]
  directus_shares      directus_shares[]
  directus_users       directus_users[]
}

model directus_sessions {
  token           String           @id @db.VarChar(64)
  user            String?          @db.Uuid
  expires         DateTime         @db.Timestamptz(6)
  ip              String?          @db.VarChar(255)
  user_agent      String?          @db.VarChar(255)
  share           String?          @db.Uuid
  origin          String?          @db.VarChar(255)
  directus_shares directus_shares? @relation(fields: [share], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_sessions_share_foreign")
  directus_users  directus_users?  @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_sessions_user_foreign")
}

model directus_settings {
  id                                                                 Int               @id @default(autoincrement())
  project_name                                                       String            @default("Directus") @db.VarChar(100)
  project_url                                                        String?           @db.VarChar(255)
  project_color                                                      String?           @db.VarChar(50)
  project_logo                                                       String?           @db.Uuid
  public_foreground                                                  String?           @db.Uuid
  public_background                                                  String?           @db.Uuid
  public_note                                                        String?
  auth_login_attempts                                                Int?              @default(25)
  auth_password_policy                                               String?           @db.VarChar(100)
  storage_asset_transform                                            String?           @default("all") @db.VarChar(7)
  storage_asset_presets                                              Json?             @db.Json
  custom_css                                                         String?
  storage_default_folder                                             String?           @db.Uuid
  basemaps                                                           Json?             @db.Json
  mapbox_key                                                         String?           @db.VarChar(255)
  module_bar                                                         Json?             @db.Json
  project_descriptor                                                 String?           @db.VarChar(100)
  translation_strings                                                Json?             @db.Json
  default_language                                                   String            @default("en-US") @db.VarChar(255)
  custom_aspect_ratios                                               Json?             @db.Json
  directus_files_directus_settings_project_logoTodirectus_files      directus_files?   @relation("directus_settings_project_logoTodirectus_files", fields: [project_logo], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_project_logo_foreign")
  directus_files_directus_settings_public_backgroundTodirectus_files directus_files?   @relation("directus_settings_public_backgroundTodirectus_files", fields: [public_background], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_public_background_foreign")
  directus_files_directus_settings_public_foregroundTodirectus_files directus_files?   @relation("directus_settings_public_foregroundTodirectus_files", fields: [public_foreground], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_public_foreground_foreign")
  directus_folders                                                   directus_folders? @relation(fields: [storage_default_folder], references: [id], onUpdate: NoAction, map: "directus_settings_storage_default_folder_foreign")
}

model directus_shares {
  id                   String                @id @db.Uuid
  name                 String?               @db.VarChar(255)
  collection           String?               @db.VarChar(64)
  item                 String?               @db.VarChar(255)
  role                 String?               @db.Uuid
  password             String?               @db.VarChar(255)
  user_created         String?               @db.Uuid
  date_created         DateTime?             @default(now()) @db.Timestamptz(6)
  date_start           DateTime?             @db.Timestamptz(6)
  date_end             DateTime?             @db.Timestamptz(6)
  times_used           Int?                  @default(0)
  max_uses             Int?
  directus_sessions    directus_sessions[]
  directus_collections directus_collections? @relation(fields: [collection], references: [collection], onDelete: Cascade, onUpdate: NoAction, map: "directus_shares_collection_foreign")
  directus_roles       directus_roles?       @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_shares_role_foreign")
  directus_users       directus_users?       @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_shares_user_created_foreign")
}

model directus_users {
  id                                                                      String                   @id @db.Uuid
  first_name                                                              String?                  @db.VarChar(50)
  last_name                                                               String?                  @db.VarChar(50)
  email                                                                   String?                  @db.VarChar(128)
  password                                                                String?                  @db.VarChar(255)
  location                                                                String?                  @db.VarChar(255)
  title                                                                   String?                  @db.VarChar(50)
  description                                                             String?
  tags                                                                    Json?                    @db.Json
  avatar                                                                  String?                  @db.Uuid
  language                                                                String?                  @db.VarChar(255)
  theme                                                                   String?                  @default("auto") @db.VarChar(20)
  tfa_secret                                                              String?                  @db.VarChar(255)
  status                                                                  String                   @default("active") @db.VarChar(16)
  role                                                                    String?                  @db.Uuid
  token                                                                   String?                  @db.VarChar(255)
  last_access                                                             DateTime?                @db.Timestamptz(6)
  last_page                                                               String?                  @db.VarChar(255)
  provider                                                                String                   @default("default") @db.VarChar(128)
  external_identifier                                                     String?                  @db.VarChar(255)
  auth_data                                                               Json?                    @db.Json
  email_notifications                                                     Boolean?                 @default(true)
  directus_dashboards                                                     directus_dashboards[]
  directus_files_directus_files_modified_byTodirectus_users               directus_files[]         @relation("directus_files_modified_byTodirectus_users")
  directus_files_directus_files_uploaded_byTodirectus_users               directus_files[]         @relation("directus_files_uploaded_byTodirectus_users")
  directus_flows                                                          directus_flows[]
  directus_notifications_directus_notifications_recipientTodirectus_users directus_notifications[] @relation("directus_notifications_recipientTodirectus_users")
  directus_notifications_directus_notifications_senderTodirectus_users    directus_notifications[] @relation("directus_notifications_senderTodirectus_users")
  directus_operations                                                     directus_operations[]
  directus_panels                                                         directus_panels[]
  directus_presets                                                        directus_presets[]
  directus_sessions                                                       directus_sessions[]
  directus_shares                                                         directus_shares[]
  directus_roles                                                          directus_roles?          @relation(fields: [role], references: [id], onUpdate: NoAction, map: "directus_users_role_foreign")
}

model directus_webhooks {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  method      String  @default("POST") @db.VarChar(10)
  url         String  @db.VarChar(255)
  status      String  @default("active") @db.VarChar(10)
  data        Boolean @default(true)
  actions     String  @db.VarChar(100)
  collections String  @db.VarChar(255)
  headers     Json?   @db.Json
}

model hotel {
  id                  Int             @id @default(autoincrement())
  hotel_code          String?         @db.VarChar(255)
  label               String?         @db.VarChar(255)
  address             String?         @db.VarChar(255)
  city_id             Int?
  phone               String?         @db.VarChar(255)
  email               String?         @db.VarChar(255)
  website             String?         @db.VarChar(255)
  rating              Int?
  reservation_link    String?         @db.VarChar(255)
  starting_from_price Decimal?        @db.Decimal(10, 5)
  long                Decimal?        @db.Decimal(10, 5)
  lat                 Decimal?        @db.Decimal(10, 5)
  hotel_image         String?         @db.Uuid
  city                city?           @relation(fields: [city_id], references: [id], onUpdate: NoAction, map: "hotel_city_id_foreign")
  directus_files      directus_files? @relation(fields: [hotel_image], references: [id], onUpdate: NoAction, map: "hotel_hotel_image_foreign")
  hotel_review        hotel_review[]
  hotel_tag           hotel_tag[]
}

model hotel_review {
  id       Int     @id @default(autoincrement())
  title    String? @db.VarChar(255)
  body     String?
  hotel_id Int?
  rating   Int?
  user_id  Int?
  hotel    hotel?  @relation(fields: [hotel_id], references: [id], onUpdate: NoAction, map: "hotel_review_hotel_id_foreign")
  user     user?   @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "hotel_review_user_id_foreign")
}

model hotel_tag {
  id       Int    @id @default(autoincrement())
  hotel_id Int?
  tag_id   Int?
  hotel    hotel? @relation(fields: [hotel_id], references: [id], onUpdate: NoAction, map: "hotel_tag_hotel_id_foreign")
  tag      tag?   @relation(fields: [tag_id], references: [id], onUpdate: NoAction, map: "hotel_tag_tag_id_foreign")
}

model restaurant {
  id                  Int                 @id @default(autoincrement())
  code                String?             @db.VarChar(255)
  label               String?             @db.VarChar(255)
  city_id             Int?
  address             String?             @db.VarChar(255)
  phone               String?             @db.VarChar(255)
  website             String?             @db.VarChar(255)
  food                String?             @db.VarChar(255)
  rating              Int?
  email               String?             @db.VarChar(255)
  long                Decimal?            @db.Decimal(10, 5)
  lat                 Decimal?            @db.Decimal(10, 5)
  avg_meal_per_person Decimal?            @db.Decimal(10, 5)
  retaurant_image     String?             @db.Uuid
  city                city?               @relation(fields: [city_id], references: [id], onUpdate: NoAction, map: "restaurant_city_id_foreign")
  directus_files      directus_files?     @relation(fields: [retaurant_image], references: [id], onUpdate: NoAction, map: "restaurant_retaurant_image_foreign")
  restaurant_review   restaurant_review[]
  restaurant_tag      restaurant_tag[]
  trip_item           trip_item[]
  user_restaurant     user_restaurant[]
}

model restaurant_review {
  id            Int         @id @default(autoincrement())
  title         String?     @db.VarChar(255)
  body          String?
  restaurant_id Int?
  rating        Int?
  user_id       Int?
  restaurant    restaurant? @relation(fields: [restaurant_id], references: [id], onUpdate: NoAction, map: "restaurant_review_restaurant_id_foreign")
  user          user?       @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "restaurant_review_user_id_foreign")
}

model tag {
  id             Int              @id @default(autoincrement())
  code           String?          @db.VarChar(255)
  label          String?          @db.VarChar(255)
  attraction_tag attraction_tag[]
  hotel_tag      hotel_tag[]
  restaurant_tag restaurant_tag[]
}

model trip {
  id         Int         @id @default(autoincrement())
  label      String?     @db.VarChar(255)
  user_id    Int?
  trip_code  String?     @db.VarChar(255)
  end_date   DateTime?   @db.Timestamp(6)
  start_date DateTime?   @db.Timestamp(6)
  user       user?       @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "trip_user_id_foreign")
  trip_items trip_item[]
}

model trip_item {
  id            Int         @id @default(autoincrement())
  datetime      DateTime?   @db.Timestamp(6)
  restaurant_id Int?
  trip_id       Int?
  attraction_id Int?
  attraction    attraction? @relation(fields: [attraction_id], references: [id], onUpdate: NoAction, map: "trip_item_attraction_id_foreign")
  restaurant    restaurant? @relation(fields: [restaurant_id], references: [id], onUpdate: NoAction, map: "trip_item_restaurant_id_foreign")
  trip          trip?       @relation(fields: [trip_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "trip_item_trip_id_foreign")
}

model user {
  id                Int                 @id @default(autoincrement())
  firstname         String?             @db.VarChar(255)
  lastname          String?             @db.VarChar(255)
  password          String?             @db.VarChar(255)
  email             String?             @db.VarChar(255)
  attraction_review attraction_review[]
  hotel_review      hotel_review[]
  restaurant_review restaurant_review[]
  trip              trip[]
  user_attraction   user_attraction[]
  user_restaurant   user_restaurant[]
}

model attraction {
  id                  Int                 @id @default(autoincrement())
  label               String?             @db.VarChar(255)
  city_id             Int?
  address             String?             @db.VarChar(255)
  phone               String?             @db.VarChar(255)
  suggested_duration  Int?
  openning_hours_from DateTime?           @db.Time(6)
  openning_hours_to   DateTime?           @db.Time(6)
  about               String?
  website             String?             @db.VarChar(255)
  type                String?             @db.VarChar(255)
  details             String?
  rating              Int?
  reservation_link    String?             @db.VarChar(255)
  min_age             Int?
  code                String?             @db.VarChar(255)
  email               String?             @db.VarChar(255)
  long                Decimal?            @db.Decimal(10, 5)
  lat                 Decimal?            @db.Decimal(10, 5)
  entry_fee           Decimal?            @db.Decimal(10, 5)
  image               String?             @db.Uuid
  city                city?               @relation(fields: [city_id], references: [id], onUpdate: NoAction, map: "attraction_city_id_foreign")
  directus_files      directus_files?     @relation(fields: [image], references: [id], onUpdate: NoAction, map: "attraction_image_foreign")
  attraction_review   attraction_review[]
  attraction_tag      attraction_tag[]
  trip_item           trip_item[]
  user_attraction     user_attraction[]
}

model restaurant_tag {
  id            Int         @id @default(autoincrement())
  restaurant_id Int?
  tag_id        Int?
  restaurant    restaurant? @relation(fields: [restaurant_id], references: [id], onUpdate: NoAction, map: "restaurant_tag_restaurant_id_foreign")
  tag           tag?        @relation(fields: [tag_id], references: [id], onUpdate: NoAction, map: "restaurant_tag_tag_id_foreign")
}

model user_attraction {
  id            Int         @id @default(autoincrement())
  user_id       Int?
  attraction_id Int?
  attraction    attraction? @relation(fields: [attraction_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_attraction_attraction_id_foreign")
  user          user?       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_attraction_user_id_foreign")
}

model user_restaurant {
  id            Int         @id @default(autoincrement())
  user_id       Int?
  restaurant_id Int?
  restaurant    restaurant? @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_restaurant_restaurant_id_foreign")
  user          user?       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_restaurant_user_id_foreign")
}
